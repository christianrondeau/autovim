#!/usr/bin/env bash
RED='\033[0;31m'
NC='\033[0m' # No Color

ParamsArray=''
ReadFromStdIn=true
for p in "$@"; do 
	# Check if we need to read from stdin
	if [[ $p == "-i" || $p == "--in" || $p == "-ni" || $p == "--no-in"  ]] ; then
		ReadFromStdIn=false
	fi

	# Escape input parameters and put in a comma-separated strings list
  p="${p//\\/\\\\}"
  ParamsArray="$ParamsArray\"${p//\"/\\\"}\","
done

# Read from stdin
if [ $ReadFromStdIn = true ]; then
	StdInTempFile=$(mktemp)
	while read input; do
		echo $input | tee -a "$StdInTempFile" > /dev/null
	done
  ParamsArray="$ParamsArray\"--in\",\"$StdInTempFile\","
fi

# Prepare a file if stdout is required
StdOutTempFile=$(mktemp -u)

# Build the Vim command line
VimCmdScript="let g:autovim_cmd=[$ParamsArray\"\"]"
VimTmpScript="let g:autovim_tmp=\"$StdOutTempFile\""
VimLaunch="vim -u ${0%/*}/../src/vimrc.vim -c '$VimCmdScript' -c '$VimTmpScript' -S '${0%/*}/../src/autovim.vim'"

# Launch
eval "$VimLaunch"

VimCmdStatus=$?
if [ $VimCmdStatus != 0 ]; then
	>&2 echo -e "${RED}Vim exited with a non-zero status code: $VimCmdStatus${NC}."
	>&2 echo "Make sure Vim is installed, in the PATH and is at least at version 7.4.1721."
 	>&2 echo "Find and create issues at https://github.com/christianrondeau/autovim/issues"
	exit
fi

# If the stdin temp file was used, clear it
if [ -f "$StdInTempFile" ]; then
	rm "$StdInTempFile"
fi

# If the stdout temp file was used, print to stdout and clear it
if [ -f "$StdOutTempFile" ]; then
	cat "$StdOutTempFile"
	rm "$StdOutTempFile"
fi

